// UGC Feature Flags Configuration
// This file is auto-generated by gate-ugc-flags.sh

export const UGC_FEATURE_FLAGS = {
  // Social listening and discovery
  'ugc.social-listening': {
    enabled: true,
    description: 'Enable social listening and UGC discovery from multiple platforms',
    group: 'ugc'
  },
  
  // Auto-editing capabilities
  'ugc.auto-editing': {
    enabled: true,
    description: 'Enable AI-powered automatic editing of UGC content',
    group: 'ugc'
  },
  
  // Voiceover generation
  'ugc.voiceover-generation': {
    enabled: true,
    description: 'Enable AI voiceover generation for UGC videos',
    group: 'ugc'
  },
  
  // Hotspot generation
  'ugc.hotspot-generation': {
    enabled: true,
    description: 'Enable interactive hotspot generation for UGC content',
    group: 'ugc'
  },
  
  // Database integration
  'ugc.database-integration': {
    enabled: true,
    description: 'Enable UGC database storage and management',
    group: 'ugc'
  },
  
  // Inbox management
  'ugc.inbox-management': {
    enabled: true,
    description: 'Enable UGC inbox for content management',
    group: 'ugc'
  },
  
  // Auto-edit button
  'ugc.auto-edit-button': {
    enabled: true,
    description: 'Enable auto-edit button in UGC interface',
    group: 'ugc'
  },
  
  // Voiceover tab
  'ugc.voiceover-tab': {
    enabled: true,
    description: 'Enable voiceover tab in UGC editor',
    group: 'ugc'
  },
  
  // Hotspot generator
  'ugc.hotspot-generator': {
    enabled: true,
    description: 'Enable hotspot generator tool',
    group: 'ugc'
  },
  
  // Dashboard
  'ugc.dashboard': {
    enabled: true,
    description: 'Enable UGC dashboard and analytics',
    group: 'ugc'
  }
} as const;

// Helper function to check if a feature is enabled
export function isUGCFeatureEnabled(feature: keyof typeof UGC_FEATURE_FLAGS): boolean {
  return UGC_FEATURE_FLAGS[feature]?.enabled ?? false;
}

// Helper function to get feature description
export function getUGCFeatureDescription(feature: keyof typeof UGC_FEATURE_FLAGS): string {
  return UGC_FEATURE_FLAGS[feature]?.description ?? 'No description available';
}

// Helper function to get all enabled features
export function getEnabledUGCFeatures(): string[] {
  return Object.entries(UGC_FEATURE_FLAGS)
    .filter(([_, config]) => config.enabled)
    .map(([feature]) => feature);
}

// Helper function to get all UGC features
export function getAllUGCFeatures(): string[] {
  return Object.keys(UGC_FEATURE_FLAGS);
}
